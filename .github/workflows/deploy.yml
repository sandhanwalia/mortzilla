name: Blue-Green Deployment to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: poc-1-aima-pmu
  SERVICE_NAME: mortzilla-web
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/poc-1-aima-pmu/mortzilla
  SERVICE_ACCOUNT: github-actions@poc-1-aima-pmu.iam.gserviceaccount.com
  GCP_PROJECT_NUMBER: 980800581325
  
jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Generate version and revision suffix
        id: versioning
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          REVISION_SUFFIX="rc-${TIMESTAMP}"
          
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "REVISION_SUFFIX=$REVISION_SUFFIX" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ARTIFACT_REGISTRY }}/mortzilla-web:${{ env.TIMESTAMP }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy New Revision
        run: |
          # Get current serving revision
          CURRENT_REVISION=$(gcloud run revisions list \
            --project=${{ env.PROJECT_ID }} \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="traffic_percent>0" \
            --format="value(metadata.name)" \
            --limit=1)

          # Check current deployment state
          if [ -n "$CURRENT_REVISION" ]; then
            CURRENT_STATE=$(gcloud run revisions describe $CURRENT_REVISION \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }} \
              --format="value(labels.state)" || echo "active")
          else
            CURRENT_STATE="active"
          fi

          # Determine new state (if current is active, deploy passive, and vice versa)
          NEW_STATE=$([ "$CURRENT_STATE" = "active" ] && echo "passive" || echo "active")
          
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/mortzilla-web:${{ env.TIMESTAMP }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --revision-suffix ${{ env.REVISION_SUFFIX }} \
            --labels=state=$NEW_STATE \
            --set-env-vars=APP_ENV=production,APP_DEBUG=true,LOG_CHANNEL=stderr,APP_KEY=${{ secrets.APP_KEY }},DB_CONNECTION=sqlite,DB_DATABASE=/var/www/html/database/database.sqlite,ASSET_URL=https://mortzilla.com \
            --no-traffic

          # Check health of new revision
          NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"

          # Debug revision information
          echo "Getting detailed information about the new revision..."
          gcloud run revisions describe $NEW_REVISION \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} || echo "Could not get detailed revision info yet"

          # Wait for service to initialize
          echo "Waiting for service to initialize..."
          sleep 20

          # Try different methods to get the URL
          NEW_URL=$(gcloud run revisions describe $NEW_REVISION \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --format="value(url)")

          if [ -z "$NEW_URL" ]; then
            echo "URL not found in 'url' field, trying alternative fields..."
            NEW_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }} \
              --format="value(status.url)")
            
            if [ -z "$NEW_URL" ]; then
              echo "Still couldn't get URL, using constructed URL as fallback"
              NEW_URL="https://${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}---${{ env.GCP_PROJECT_NUMBER }}.${{ env.REGION }}.run.app"
            fi
          fi
          
          echo "New revision URL: $NEW_URL"
          
          # Health check with retries
          MAX_RETRIES=5
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "Performing health check attempt $((RETRY_COUNT + 1))..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $NEW_URL || echo "failed")
            
            if [ "$HTTP_STATUS" = "200" ]; then
              SUCCESS=true
              echo "Health check passed with status $HTTP_STATUS"
              echo "status=success" >> $GITHUB_ENV
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "Health check failed with status $HTTP_STATUS. Retry $RETRY_COUNT of $MAX_RETRIES"
              sleep 15
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "Health check failed after $MAX_RETRIES retries"
            echo "status=failed" >> $GITHUB_ENV
            echo "Detailed service information:"
            gcloud run services describe ${{ env.SERVICE_NAME }} \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }}
            exit 1
          fi

      - name: Migrate traffic to new revision
        if: env.status == 'success'
        run: |
          NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"
          
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --to-revisions=$NEW_REVISION=100

      - name: Clean up old revisions (keep last 5)
        if: always()
        run: |
          REVISIONS=$(gcloud run revisions list \
            --project=${{ env.PROJECT_ID }} \
            --service ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(metadata.name)' \
            --sort-by=~metadata.creationTimestamp --limit=1000)

          COUNT=0
          for REVISION in $REVISIONS; do
            COUNT=$((COUNT + 1))
            if [ $COUNT -gt 5 ]; then
              gcloud run revisions delete $REVISION \
                --project=${{ env.PROJECT_ID }} \
                --region=${{ env.REGION }} \
                --quiet || true
            fi
          done

      - name: Rollback on Failure
        if: failure()
        run: |
          CURRENT_REVISION=$(gcloud run revisions list \
            --project=${{ env.PROJECT_ID }} \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="traffic_percent>0" \
            --format="value(metadata.name)" \
            --limit=1)

          if [ -n "$CURRENT_REVISION" ]; then
            echo "Rolling back to: $CURRENT_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --project=${{ env.PROJECT_ID }} \
              --region=${{ env.REGION }} \
              --to-revisions=$CURRENT_REVISION=100
          fi

      - name: Notify Deployment Status
        if: always()
        run: |
          NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"
          ENVIRONMENT="*Production*"
          STATUS="SUCCEEDED"
          STATUS_EMOJI="‚úÖ"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="FAILED"
            STATUS_EMOJI="‚ùå"
          fi
          
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"text\": \"${STATUS_EMOJI} [${ENVIRONMENT}] *Deployment* ${STATUS}\nüöÄ *Service:* ${{ env.SERVICE_NAME }}\nüì¶ *Revision:* ${NEW_REVISION}\nüåé *Region:* ${{ env.REGION }}\nüí¨ *Commit:* *${COMMIT_MSG}*\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}