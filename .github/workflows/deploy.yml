name: Blue-Green Deployment to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: poc-1-aima-pmu
  SERVICE_NAME: mortzilla-web
  REGION: us-central1
  GCP_PROJECT_NUMBER: 980800581325
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/poc-1-aima-pmu/mortzilla
  SERVICE_ACCOUNT: github-actions@poc-1-aima-pmu.iam.gserviceaccount.com
  APP_KEY: base64:NrKc1wZNqxKcVZXBVhGqY9TnQPBXI6c6RIwQJqRMvAE=
  SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Service Account Key File
        run: |
          echo "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAicG9jLTEtYWltYS1wbXUiLAogICJwcml2YXRlX2tleV9pZCI6ICI0MzQ1MmJkN2VkY2MxMmIwNzAxYzkxMjFhNmM3MWI2NjI4NjQ4N2Q5IiwKICAicHJpdmF0ZV9rZXkiOiAiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXG5NSUlFdkFJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLWXdnZ1NpQWdFQUFvSUJBUUM0UEo2cTBoYzBxUWpUXG5PU0M3SndERmE3bDYxTm9lNmlQNTRFREFMYTNLU29kN3pONmVpQ1FHb25ZSFdGWktMamFENkdPdDRrOFJ4NVJoXG5XOEt5YmRjdTlSbUg0QU1oMFY3ZlhibDdRdzRWTDlyNlE2bTN3VG1XejU5TmpGR1J1MFhOcEQrVGdmN3pXeVNKXG5mbkdqQmRhd0Z4UW9JZ2NWMXNzRHU1dW5sOWdtUzFIT001aUZJOTZnd29CRnViUVpTRERadWpSQ0pNRXBlZ094XG5tUis4alpVTnZjdWo2OWdhYnRBZm1mN3dYaFdxY1V0YkhIRGt1Mkl5YzFoNHdQRzhHa0RZVnBaSitZYTEwc0lTXG5uWUtrYyt3T3NHa3EzeWlMckxDRnBnazBGMWlXRGVDVmdDa0ZEMWhBTFZGeWlvbThhbUMxTXRYVXpVWXk5UU9EXG5oOUlCNUNSOUFnTUJBQUVDZ2Y5SHdDRFh6R0Nqb1plQmVENHRjYlpiTEg5Y283dm9nWHFCVmlGN0hSdmVrdlRLXG5XN0pYY2EzSlRoV3BZRDNVY3NTVk5EalEvMnVZbXFGN3I0Mmp2SW5FY3haa3VyK3d1TC90UGF5eUI3Z25pQzdaXG5lN08yd3duRU1oZSt6d0NQRGF6VTZhS2x0a2V0NVZFSW9ZS2dGRms3T3ZUcmVTSGkzM2N4RnBLaHpBRVZUcFlpXG5NYVVlWE04WHg4VW1FUjNycnd4OUxiR0FYTEwxTlNsSTJhUEVqeXNSN3FlUzJaWUhqYzhaQytwTG1Qb2hFQzByXG5zL0xGNjN1R2dCakU5dFZ6MDFvdUFhTDdXVzlCQTZJSWhINkh3SElXOVlQUTVQNkhoemh2U3hLcWEzaE8wM2lnXG5SQU1VOUdsMVVuVVhYVFhYNCtRbEZ0Tk9VbjNSaXBENlVWZXRCSThDZ1lFQTdzUjNocXNqVTJJN0Y3TFJSR1NJXG56Y3U1T2lwSnFUUG9INDI4Z3piWjUzNTlnemtmSlZIVGUzNjgrYUZzbDc3YmJzdXU1NHFCRGt4a2QrVFM3YU1LXG5uQ1hiTmE3L0k5eWlFdENjbjh4cEhLeS83TkNjdXlkeXJrdEJIa21wdFJNZjU5VnZ2dDZKeXpLSmJIQjlzQTNiXG5jcVJNZS94QzFZQlJOaVRESTZjL3ptY0NnWUVBeFlpaEtmU3YyT2RCSmY3cHp2LzZ4NFdXdUNlaUZ1R0dTWldVXG42UDVpOWFNRmExS216TVVxZ25VUjRjUkJLVi9NaWd6STVkbnNvK1VUTDN2a3c1c1hWWmtxOTF3YTlDd0FjZ1pOXG5sdmxONDQraDV2bnlTZVZUQzA5cUNJeTV6dFdlcnV4a0JpVVEva0ZybnlIVm8vOXdpdHpUYlIyL0ZiSk1pZ3doXG5FUGhtbjNzQ2dZRUFoS2xhYzlPUWpCclBGR3JCUlF2S3l2VS9WQ2I4eUd0VHRIeHUya1RXcTMyblJRcXUySEJ2XG5YWFZja0NKMWtKWjFtMGpHUkZXN1FQT0crdXFEbTQ5MExMQUg3UHJ2UGNDdnVGNTZOM3MraDdVZjZmYzZyZTNNXG5GVFV3MkNBN2o2VXhuQUVGMW5vVSszWjN6bTF1R0N5SzJsYVpQR1k3eUI1RWdSM0o0bnhod2s4Q2dZRUFwZmVlXG5NYm84NVdtbisxeXE1aGw5ZzVaaWhHZ0ljR0VjaTBiNnpxaXVUT1NqOFFDSTFSUDBHNWh4WmRlWFNFUU5meEF1XG4yN0MyZXg1RmVHZ0lWYkZCY2RJM240M3J0NndnMDYwb0UrbHozL2NXZVJNWTE2MnVrSm93NU80WVVBaDhRMHlxXG4zZDdXNEVubk90VWF3Nmdqendpck84cjZlaWhNMXRCS0dCQWRhWEVDZ1lCVG1YMFRWOE1tM0FMWS80UDZBVitXXG41Y08wTXZmSXAvZHNNeVNVaFNvejh4R1JWTlA0eDdPUmlGWE5IalFLaWI4WDZKOUJTM1dmYU9Ba2ZPMFc5cTVoXG4yUE5hcm5TM0x2OG1YcVdSaU1DdWhrRlB3Zko5NVZjTGlxVStIT3RPVHoydmFGMURzT3lBUlpQd3FBRzljdnMvXG5NU1NsTUZPRkZnazQwd0NTS2oyRTV3PT1cbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cbiIsCiAgImNsaWVudF9lbWFpbCI6ICJnaXRodWItYWN0aW9uc0Bwb2MtMS1haW1hLXBtdS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIsCiAgImNsaWVudF9pZCI6ICIxMDAzODM3ODg2ODAyNTYxMTg3MjIiLAogICJhdXRoX3VyaSI6ICJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aCIsCiAgInRva2VuX3VyaSI6ICJodHRwczovL29hdXRoMi5nb29nbGVhcGlzLmNvbS90b2tlbiIsCiAgImF1dGhfcHJvdmlkZXJfeDUwOV9jZXJ0X3VybCI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvY2VydHMiLAogICJjbGllbnRfeDUwOV9jZXJ0X3VybCI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9yb2JvdC92MS9tZXRhZGF0YS94NTA5L2dpdGh1Yi1hY3Rpb25zJTQwcG9jLTEtYWltYS1wbXUuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJ1bml2ZXJzZV9kb21haW4iOiAiZ29vZ2xlYXBpcy5jb2==" | base64 -d > /tmp/service-account-key.json
          echo "Created service account key file"

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GCP_SA_KEY_FILE }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          project_id: ${{ env.PROJECT_ID }}
        env:
          GCP_SA_KEY_FILE: /tmp/service-account-key.json

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      - name: Use Application Default Credentials
        run: |
          gcloud auth application-default login

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Generate version and revision suffix
        id: versioning
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          REVISION_SUFFIX="rc-${TIMESTAMP}"
          
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "REVISION_SUFFIX=$REVISION_SUFFIX" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ARTIFACT_REGISTRY }}/mortzilla-web:${{ env.TIMESTAMP }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy New Revision
        run: |
          # Get current serving revision
          CURRENT_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="traffic_percent>0" \
            --format="value(metadata.name)" \
            --limit=1)

          # Check current deployment state
          CURRENT_STATE=$(gcloud run revisions describe $CURRENT_REVISION \
            --region=${{ env.REGION }} \
            --format="value(labels.state)" || echo "active")

          # Determine new state (if current is active, deploy passive, and vice versa)
          NEW_STATE=$([ "$CURRENT_STATE" = "active" ] && echo "passive" || echo "active")
          
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/mortzilla-web:${{ env.TIMESTAMP }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --service-account ${{ env.SERVICE_ACCOUNT }} \
            --min-instances 1 \
            --memory 512Mi \
            --revision-suffix=${{ env.REVISION_SUFFIX }} \
            --labels=state=$NEW_STATE \
            --no-traffic \
            --timeout 300 \
            --execution-environment gen2 \
            --cpu=1 \
            --set-env-vars STARTUP_CPU_BOOST=true,APP_ENV=production,APP_DEBUG=true,LOG_CHANNEL=stderr,APP_KEY=${{ env.APP_KEY }},DB_CONNECTION=sqlite,DB_DATABASE=/var/www/html/database/database.sqlite,ASSET_URL=https://${{ env.SERVICE_NAME }}-${{ env.GCP_PROJECT_NUMBER }}.${{ env.REGION }}.run.app

          # Ensure traffic stays with current revision during testing
          if [ -n "$CURRENT_REVISION" ]; then
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$CURRENT_REVISION=100
          fi

          echo "NEW_STATE=$NEW_STATE" >> $GITHUB_ENV
          echo "CURRENT_REVISION=$CURRENT_REVISION" >> $GITHUB_ENV

      - name: Test New Revision
        id: test
        run: |
          sleep 30
          NEW_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")

          echo "Testing URL: $NEW_URL"

          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$NEW_URL")

            if [ "$HTTP_STATUS" -eq 200 ]; then
              SUCCESS=true
              echo "status=success" >> $GITHUB_ENV
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "Attempt $RETRY_COUNT failed with status $HTTP_STATUS"
              [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep 10
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "status=failure" >> $GITHUB_ENV
            exit 1
          fi

      - name: Migrate traffic to new revision
        if: env.status == 'success'
        run: |
          NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"
          
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --to-revisions=$NEW_REVISION=100

      - name: Clean up old revisions (keep last 5)
        if: always()
        run: |
          set -e
          REVISIONS=$(gcloud run revisions list \
            --service ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(metadata.name)' \
            --sort-by=~metadata.creationTimestamp --limit=1000)

          COUNT=0
          for REVISION in $REVISIONS; do
            COUNT=$((COUNT + 1))
            if [ $COUNT -gt 5 ]; then
              gcloud run revisions delete $REVISION \
                --region=${{ env.REGION }} \
                --quiet || true
            fi
          done

      - name: Rollback on Failure
        if: failure()
        run: |
          CURRENT_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --filter="traffic_percent>0" \
            --format="value(metadata.name)" \
            --limit=1)

          if [ -n "$CURRENT_REVISION" ]; then
            echo "Rolling back to: $CURRENT_REVISION"
            gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --to-revisions=$CURRENT_REVISION=100
          fi

      - name: Notify Deployment Status
        if: always()
        run: |
          NEW_REVISION="${{ env.SERVICE_NAME }}-${{ env.REVISION_SUFFIX }}"
          ENVIRONMENT="*Production*"
          STATUS="SUCCEEDED"
          STATUS_EMOJI="✅"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="FAILED"
            STATUS_EMOJI="❌"
          fi
          
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          
          # Send notification to Slack
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"text\": \"${STATUS_EMOJI} [${ENVIRONMENT}] *Deployment* ${STATUS}\n🚀 *Service:* ${{ env.SERVICE_NAME }}\n📦 *Revision:* ${NEW_REVISION}\n🌎 *Region:* ${{ env.REGION }}\n💬 *Commit:* *${COMMIT_MSG}*\"}" \
            ${{ env.SLACK_WEBHOOK_URL }}